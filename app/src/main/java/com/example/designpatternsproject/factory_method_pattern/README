Тип 	Порождающий
Назначение 	Для создания объектов различных типов одним интерфейсом
Плюсы 	Создание объектов, независимо от их типов и сложности процесса создания.
Минусы 	Даже для одного объекта необходимо создать соответствующую фабрику, что увеличивает код.


Например:
 CarCreator creator = new JapanCarCreator();
Car infinity =  creator.create(JapanCarCreator.INFINITI);
Тоесть, создание объекта Car делает непосредственно не Activity, а класс Creator

шаблон проектирования, предоставляющий подклассам (дочерним классам) интерфейс для создания экземпляров некоторого класса. В момент создания наследники могут определить, какой класс создавать. Иными словами, данный шаблон делегирует создание объектов наследникам родительского класса. Это позволяет использовать в коде программы не специфические классы, а манипулировать абстрактными объектами на более высоком уровне.


Что это нам дает ?
Это позволяет использовать в коде программы не специфические классы, а манипулировать абстрактными объектами на более высоком уровне.


Usage of Factory Design Pattern
    When a class doesn't know what sub-classes will be required to create
    When a class wants that its sub-classes specify the objects to be created.
    When the parent classes choose the creation of objects to its sub-classes.

    
